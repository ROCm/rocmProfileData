diff --git a/torch/autograd/profiler.py b/torch/autograd/profiler.py
index ad16529951..ee56ff199f 100644
--- a/torch/autograd/profiler.py
+++ b/torch/autograd/profiler.py
@@ -197,6 +197,77 @@ class EventList(list):
             with_flops=self._with_flops,
             top_level_events_only=top_level_events_only)
 
+    def export_rpd(self, path):
+        """Exports an EventList as a Chrome tracing tools file.
+
+         Arguments:
+            path (str): Path where the trace will be written.
+        """
+        print("Exporting rpt...")
+        import sqlite3
+
+        # FIXME: remove old file if it exists
+
+        connection = sqlite3.connect(path)
+        connection.execute('CREATE TABLE IF NOT EXISTS "rocpd_string" ("id" integer NOT NULL PRIMARY KEY, "string" varchar(4096) NOT NULL)')
+        connection.execute('CREATE TABLE IF NOT EXISTS "rocpd_op" ("id" integer NOT NULL PRIMARY KEY, "gpuId" integer NOT NULL, "queueId" integer NOT NULL, "sequenceId" integer NOT NULL, "completionSignal" varchar(18) NOT NULL, "start" integer NOT NULL, "end" integer NOT NULL, "description_id" integer NOT NULL REFERENCES "rocpd_string" ("id") DEFERRABLE INITIALLY DEFERRED, "opType_id" integer NOT NULL REFERENCES "rocpd_string" ("id") DEFERRABLE INITIALLY DEFERRED)')
+        connection.execute('CREATE TABLE IF NOT EXISTS "rocpd_api" ("id" integer NOT NULL PRIMARY KEY, "pid" integer NOT NULL, "tid" integer NOT NULL, "start" integer NOT NULL, "end" integer NOT NULL, "apiName_id" integer NOT NULL REFERENCES "rocpd_string" ("id") DEFERRABLE INITIALLY DEFERRED, "args_id" integer NOT NULL REFERENCES "rocpd_string" ("id") DEFERRABLE INITIALLY DEFERRED)')
+        connection.execute('CREATE TABLE IF NOT EXISTS "rocpd_api_ops" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "api_id" integer NOT NULL REFERENCES "rocpd_api" ("id") DEFERRABLE INITIALLY DEFERRED, "op_id" integer NOT NULL REFERENCES "rocpd_op" ("id") DEFERRABLE INITIALLY DEFERRED)')
+
+        #Set up primary keys
+        string_id = 1
+        op_id = 1
+        api_id = 1
+
+        # Dicts
+        strings = {}    # string -> id
+
+        # rows to bulk insert
+        string_inserts = []
+        api_inserts = []
+        op_inserts = []
+        api_ops_inserts = []
+
+        #empty string
+        empty = string_id
+        strings[""] = string_id
+        string_inserts.append((string_id, ""))
+        string_id = string_id + 1
+
+        for evt in self:
+            try:
+                name = strings[evt.name]
+            except:
+                strings[evt.name] = string_id
+                string_inserts.append((string_id, evt.name))
+                name = string_id
+                string_id = string_id + 1
+
+            api_inserts.append((api_id, 100, evt.thread, evt.cpu_interval.start * 1000, (evt.cpu_interval.start + evt.cpu_interval.elapsed_us()) * 1000, name, empty))
+
+            #---------------------
+            for k in evt.kernels:
+                try:
+                    kname = strings[k.name]
+                except:
+                    strings[k.name] = string_id
+                    string_inserts.append((string_id, k.name))
+                    kname = string_id
+                    string_id = string_id + 1
+
+                op_inserts.append((op_id, k.device, 0, k.interval.start * 1000, (k.interval.start + k.interval.elapsed_us()) * 1000, kname, empty))
+                api_ops_inserts.append((api_id, op_id))
+                op_id = op_id + 1
+            #---------------------
+            api_id = api_id + 1
+
+        connection.executemany("insert into rocpd_string(id, string) values (?,?)", string_inserts)
+        connection.executemany("insert into rocpd_api(id, pid, tid, start, end, apiName_id, args_id) values (?,?,?,?,?,?,?)", api_inserts)
+        connection.executemany("insert into rocpd_op(id, gpuId, queueId, sequenceId, completionSignal,  start, end, description_id, opType_id) values (?,?,?,'','',?,?,?,?)", op_inserts)
+        connection.executemany("insert into rocpd_api_ops(api_id, op_id) values (?,?)", api_ops_inserts)
+        connection.commit()
+        connection.close()
+
     def export_chrome_trace(self, path):
         """Exports an EventList as a Chrome tracing tools file.
 
@@ -533,6 +604,11 @@ class profile(object):
         )
     table.__doc__ = EventList.table.__doc__
 
+    def export_rpd(self, path):
+        self._check_finish()
+        return self.function_events.export_rpd(path)
+    export_rpd.__doc__ = EventList.export_rpd.__doc__
+
     def export_chrome_trace(self, path):
         self._check_finish()
         if self.kineto_results is not None:
